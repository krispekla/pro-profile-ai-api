//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Character = newCharacterTable("public", "character", "")

type characterTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnInteger
	UserID    postgres.ColumnString
	Name      postgres.ColumnString
	Gender    postgres.ColumnString
	HairColor postgres.ColumnString
	EyeColor  postgres.ColumnString
	Ethnicity postgres.ColumnString
	Age       postgres.ColumnString
	Created   postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CharacterTable struct {
	characterTable

	EXCLUDED characterTable
}

// AS creates new CharacterTable with assigned alias
func (a CharacterTable) AS(alias string) *CharacterTable {
	return newCharacterTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CharacterTable with assigned schema name
func (a CharacterTable) FromSchema(schemaName string) *CharacterTable {
	return newCharacterTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CharacterTable with assigned table prefix
func (a CharacterTable) WithPrefix(prefix string) *CharacterTable {
	return newCharacterTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CharacterTable with assigned table suffix
func (a CharacterTable) WithSuffix(suffix string) *CharacterTable {
	return newCharacterTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCharacterTable(schemaName, tableName, alias string) *CharacterTable {
	return &CharacterTable{
		characterTable: newCharacterTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newCharacterTableImpl("", "excluded", ""),
	}
}

func newCharacterTableImpl(schemaName, tableName, alias string) characterTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		UserIDColumn    = postgres.StringColumn("user_id")
		NameColumn      = postgres.StringColumn("name")
		GenderColumn    = postgres.StringColumn("gender")
		HairColorColumn = postgres.StringColumn("hair_color")
		EyeColorColumn  = postgres.StringColumn("eye_color")
		EthnicityColumn = postgres.StringColumn("ethnicity")
		AgeColumn       = postgres.StringColumn("age")
		CreatedColumn   = postgres.TimestampColumn("created")
		allColumns      = postgres.ColumnList{IDColumn, UserIDColumn, NameColumn, GenderColumn, HairColorColumn, EyeColorColumn, EthnicityColumn, AgeColumn, CreatedColumn}
		mutableColumns  = postgres.ColumnList{UserIDColumn, NameColumn, GenderColumn, HairColorColumn, EyeColorColumn, EthnicityColumn, AgeColumn, CreatedColumn}
	)

	return characterTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		UserID:    UserIDColumn,
		Name:      NameColumn,
		Gender:    GenderColumn,
		HairColor: HairColorColumn,
		EyeColor:  EyeColorColumn,
		Ethnicity: EthnicityColumn,
		Age:       AgeColumn,
		Created:   CreatedColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
