//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var PackageOrderItem = newPackageOrderItemTable("public", "package_order_item", "")

type packageOrderItemTable struct {
	postgres.Table

	// Columns
	ID             postgres.ColumnInteger
	PackageOrderID postgres.ColumnInteger
	PackageID      postgres.ColumnInteger
	Created        postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PackageOrderItemTable struct {
	packageOrderItemTable

	EXCLUDED packageOrderItemTable
}

// AS creates new PackageOrderItemTable with assigned alias
func (a PackageOrderItemTable) AS(alias string) *PackageOrderItemTable {
	return newPackageOrderItemTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PackageOrderItemTable with assigned schema name
func (a PackageOrderItemTable) FromSchema(schemaName string) *PackageOrderItemTable {
	return newPackageOrderItemTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PackageOrderItemTable with assigned table prefix
func (a PackageOrderItemTable) WithPrefix(prefix string) *PackageOrderItemTable {
	return newPackageOrderItemTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PackageOrderItemTable with assigned table suffix
func (a PackageOrderItemTable) WithSuffix(suffix string) *PackageOrderItemTable {
	return newPackageOrderItemTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPackageOrderItemTable(schemaName, tableName, alias string) *PackageOrderItemTable {
	return &PackageOrderItemTable{
		packageOrderItemTable: newPackageOrderItemTableImpl(schemaName, tableName, alias),
		EXCLUDED:              newPackageOrderItemTableImpl("", "excluded", ""),
	}
}

func newPackageOrderItemTableImpl(schemaName, tableName, alias string) packageOrderItemTable {
	var (
		IDColumn             = postgres.IntegerColumn("id")
		PackageOrderIDColumn = postgres.IntegerColumn("package_order_id")
		PackageIDColumn      = postgres.IntegerColumn("package_id")
		CreatedColumn        = postgres.TimestampColumn("created")
		allColumns           = postgres.ColumnList{IDColumn, PackageOrderIDColumn, PackageIDColumn, CreatedColumn}
		mutableColumns       = postgres.ColumnList{PackageOrderIDColumn, PackageIDColumn, CreatedColumn}
	)

	return packageOrderItemTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		PackageOrderID: PackageOrderIDColumn,
		PackageID:      PackageIDColumn,
		Created:        CreatedColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
