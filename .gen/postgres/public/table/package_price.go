//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var PackagePrice = newPackagePriceTable("public", "package_price", "")

type packagePriceTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnInteger
	PackageID postgres.ColumnInteger
	Amount    postgres.ColumnInteger
	Currency  postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PackagePriceTable struct {
	packagePriceTable

	EXCLUDED packagePriceTable
}

// AS creates new PackagePriceTable with assigned alias
func (a PackagePriceTable) AS(alias string) *PackagePriceTable {
	return newPackagePriceTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PackagePriceTable with assigned schema name
func (a PackagePriceTable) FromSchema(schemaName string) *PackagePriceTable {
	return newPackagePriceTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PackagePriceTable with assigned table prefix
func (a PackagePriceTable) WithPrefix(prefix string) *PackagePriceTable {
	return newPackagePriceTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PackagePriceTable with assigned table suffix
func (a PackagePriceTable) WithSuffix(suffix string) *PackagePriceTable {
	return newPackagePriceTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPackagePriceTable(schemaName, tableName, alias string) *PackagePriceTable {
	return &PackagePriceTable{
		packagePriceTable: newPackagePriceTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newPackagePriceTableImpl("", "excluded", ""),
	}
}

func newPackagePriceTableImpl(schemaName, tableName, alias string) packagePriceTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		PackageIDColumn = postgres.IntegerColumn("package_id")
		AmountColumn    = postgres.IntegerColumn("amount")
		CurrencyColumn  = postgres.StringColumn("currency")
		allColumns      = postgres.ColumnList{IDColumn, PackageIDColumn, AmountColumn, CurrencyColumn}
		mutableColumns  = postgres.ColumnList{PackageIDColumn, AmountColumn, CurrencyColumn}
	)

	return packagePriceTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		PackageID: PackageIDColumn,
		Amount:    AmountColumn,
		Currency:  CurrencyColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
