//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Coupon = newCouponTable("public", "coupon", "")

type couponTable struct {
	postgres.Table

	// Columns
	ID         postgres.ColumnInteger
	PackageID  postgres.ColumnInteger
	Code       postgres.ColumnString
	Amount     postgres.ColumnInteger
	Currency   postgres.ColumnString
	Percentage postgres.ColumnInteger
	Created    postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CouponTable struct {
	couponTable

	EXCLUDED couponTable
}

// AS creates new CouponTable with assigned alias
func (a CouponTable) AS(alias string) *CouponTable {
	return newCouponTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CouponTable with assigned schema name
func (a CouponTable) FromSchema(schemaName string) *CouponTable {
	return newCouponTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CouponTable with assigned table prefix
func (a CouponTable) WithPrefix(prefix string) *CouponTable {
	return newCouponTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CouponTable with assigned table suffix
func (a CouponTable) WithSuffix(suffix string) *CouponTable {
	return newCouponTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCouponTable(schemaName, tableName, alias string) *CouponTable {
	return &CouponTable{
		couponTable: newCouponTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newCouponTableImpl("", "excluded", ""),
	}
}

func newCouponTableImpl(schemaName, tableName, alias string) couponTable {
	var (
		IDColumn         = postgres.IntegerColumn("id")
		PackageIDColumn  = postgres.IntegerColumn("package_id")
		CodeColumn       = postgres.StringColumn("code")
		AmountColumn     = postgres.IntegerColumn("amount")
		CurrencyColumn   = postgres.StringColumn("currency")
		PercentageColumn = postgres.IntegerColumn("percentage")
		CreatedColumn    = postgres.TimestampColumn("created")
		allColumns       = postgres.ColumnList{IDColumn, PackageIDColumn, CodeColumn, AmountColumn, CurrencyColumn, PercentageColumn, CreatedColumn}
		mutableColumns   = postgres.ColumnList{PackageIDColumn, CodeColumn, AmountColumn, CurrencyColumn, PercentageColumn, CreatedColumn}
	)

	return couponTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		PackageID:  PackageIDColumn,
		Code:       CodeColumn,
		Amount:     AmountColumn,
		Currency:   CurrencyColumn,
		Percentage: PercentageColumn,
		Created:    CreatedColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
