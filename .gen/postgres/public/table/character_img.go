//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var CharacterImg = newCharacterImgTable("public", "character_img", "")

type characterImgTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnInteger
	CharacterID postgres.ColumnInteger
	ImgURL      postgres.ColumnString
	Created     postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CharacterImgTable struct {
	characterImgTable

	EXCLUDED characterImgTable
}

// AS creates new CharacterImgTable with assigned alias
func (a CharacterImgTable) AS(alias string) *CharacterImgTable {
	return newCharacterImgTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CharacterImgTable with assigned schema name
func (a CharacterImgTable) FromSchema(schemaName string) *CharacterImgTable {
	return newCharacterImgTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CharacterImgTable with assigned table prefix
func (a CharacterImgTable) WithPrefix(prefix string) *CharacterImgTable {
	return newCharacterImgTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CharacterImgTable with assigned table suffix
func (a CharacterImgTable) WithSuffix(suffix string) *CharacterImgTable {
	return newCharacterImgTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCharacterImgTable(schemaName, tableName, alias string) *CharacterImgTable {
	return &CharacterImgTable{
		characterImgTable: newCharacterImgTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newCharacterImgTableImpl("", "excluded", ""),
	}
}

func newCharacterImgTableImpl(schemaName, tableName, alias string) characterImgTable {
	var (
		IDColumn          = postgres.IntegerColumn("id")
		CharacterIDColumn = postgres.IntegerColumn("character_id")
		ImgURLColumn      = postgres.StringColumn("img_url")
		CreatedColumn     = postgres.TimestampColumn("created")
		allColumns        = postgres.ColumnList{IDColumn, CharacterIDColumn, ImgURLColumn, CreatedColumn}
		mutableColumns    = postgres.ColumnList{CharacterIDColumn, ImgURLColumn, CreatedColumn}
	)

	return characterImgTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		CharacterID: CharacterIDColumn,
		ImgURL:      ImgURLColumn,
		Created:     CreatedColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
