//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var CharacterModel = newCharacterModelTable("public", "character_model", "")

type characterModelTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnInteger
	CharacterID postgres.ColumnInteger
	ModelURL    postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CharacterModelTable struct {
	characterModelTable

	EXCLUDED characterModelTable
}

// AS creates new CharacterModelTable with assigned alias
func (a CharacterModelTable) AS(alias string) *CharacterModelTable {
	return newCharacterModelTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CharacterModelTable with assigned schema name
func (a CharacterModelTable) FromSchema(schemaName string) *CharacterModelTable {
	return newCharacterModelTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CharacterModelTable with assigned table prefix
func (a CharacterModelTable) WithPrefix(prefix string) *CharacterModelTable {
	return newCharacterModelTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CharacterModelTable with assigned table suffix
func (a CharacterModelTable) WithSuffix(suffix string) *CharacterModelTable {
	return newCharacterModelTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCharacterModelTable(schemaName, tableName, alias string) *CharacterModelTable {
	return &CharacterModelTable{
		characterModelTable: newCharacterModelTableImpl(schemaName, tableName, alias),
		EXCLUDED:            newCharacterModelTableImpl("", "excluded", ""),
	}
}

func newCharacterModelTableImpl(schemaName, tableName, alias string) characterModelTable {
	var (
		IDColumn          = postgres.IntegerColumn("id")
		CharacterIDColumn = postgres.IntegerColumn("character_id")
		ModelURLColumn    = postgres.StringColumn("model_url")
		allColumns        = postgres.ColumnList{IDColumn, CharacterIDColumn, ModelURLColumn}
		mutableColumns    = postgres.ColumnList{CharacterIDColumn, ModelURLColumn}
	)

	return characterModelTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		CharacterID: CharacterIDColumn,
		ModelURL:    ModelURLColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
