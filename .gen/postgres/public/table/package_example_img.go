//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var PackageExampleImg = newPackageExampleImgTable("public", "package_example_img", "")

type packageExampleImgTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnInteger
	PackageID postgres.ColumnInteger
	ImgURL    postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PackageExampleImgTable struct {
	packageExampleImgTable

	EXCLUDED packageExampleImgTable
}

// AS creates new PackageExampleImgTable with assigned alias
func (a PackageExampleImgTable) AS(alias string) *PackageExampleImgTable {
	return newPackageExampleImgTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PackageExampleImgTable with assigned schema name
func (a PackageExampleImgTable) FromSchema(schemaName string) *PackageExampleImgTable {
	return newPackageExampleImgTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PackageExampleImgTable with assigned table prefix
func (a PackageExampleImgTable) WithPrefix(prefix string) *PackageExampleImgTable {
	return newPackageExampleImgTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PackageExampleImgTable with assigned table suffix
func (a PackageExampleImgTable) WithSuffix(suffix string) *PackageExampleImgTable {
	return newPackageExampleImgTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPackageExampleImgTable(schemaName, tableName, alias string) *PackageExampleImgTable {
	return &PackageExampleImgTable{
		packageExampleImgTable: newPackageExampleImgTableImpl(schemaName, tableName, alias),
		EXCLUDED:               newPackageExampleImgTableImpl("", "excluded", ""),
	}
}

func newPackageExampleImgTableImpl(schemaName, tableName, alias string) packageExampleImgTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		PackageIDColumn = postgres.IntegerColumn("package_id")
		ImgURLColumn    = postgres.StringColumn("img_url")
		allColumns      = postgres.ColumnList{IDColumn, PackageIDColumn, ImgURLColumn}
		mutableColumns  = postgres.ColumnList{PackageIDColumn, ImgURLColumn}
	)

	return packageExampleImgTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		PackageID: PackageIDColumn,
		ImgURL:    ImgURLColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
