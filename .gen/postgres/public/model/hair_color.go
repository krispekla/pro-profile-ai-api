//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package model

import "errors"

type HairColor string

const (
	HairColor_Black  HairColor = "black"
	HairColor_Brown  HairColor = "brown"
	HairColor_Blond  HairColor = "blond"
	HairColor_Gray   HairColor = "gray"
	HairColor_Red    HairColor = "red"
	HairColor_Nohair HairColor = "nohair"
	HairColor_Other  HairColor = "other"
)

func (e *HairColor) Scan(value interface{}) error {
	var enumValue string
	switch val := value.(type) {
	case string:
		enumValue = val
	case []byte:
		enumValue = string(val)
	default:
		return errors.New("jet: Invalid scan value for AllTypesEnum enum. Enum value has to be of type string or []byte")
	}

	switch enumValue {
	case "black":
		*e = HairColor_Black
	case "brown":
		*e = HairColor_Brown
	case "blond":
		*e = HairColor_Blond
	case "gray":
		*e = HairColor_Gray
	case "red":
		*e = HairColor_Red
	case "nohair":
		*e = HairColor_Nohair
	case "other":
		*e = HairColor_Other
	default:
		return errors.New("jet: Invalid scan value '" + enumValue + "' for HairColor enum")
	}

	return nil
}

func (e HairColor) String() string {
	return string(e)
}
