//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var SsoDomains = newSsoDomainsTable("auth", "sso_domains", "")

type ssoDomainsTable struct {
	postgres.Table

	// Columns
	ID            postgres.ColumnString
	SsoProviderID postgres.ColumnString
	Domain        postgres.ColumnString
	CreatedAt     postgres.ColumnTimestampz
	UpdatedAt     postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SsoDomainsTable struct {
	ssoDomainsTable

	EXCLUDED ssoDomainsTable
}

// AS creates new SsoDomainsTable with assigned alias
func (a SsoDomainsTable) AS(alias string) *SsoDomainsTable {
	return newSsoDomainsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SsoDomainsTable with assigned schema name
func (a SsoDomainsTable) FromSchema(schemaName string) *SsoDomainsTable {
	return newSsoDomainsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SsoDomainsTable with assigned table prefix
func (a SsoDomainsTable) WithPrefix(prefix string) *SsoDomainsTable {
	return newSsoDomainsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SsoDomainsTable with assigned table suffix
func (a SsoDomainsTable) WithSuffix(suffix string) *SsoDomainsTable {
	return newSsoDomainsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSsoDomainsTable(schemaName, tableName, alias string) *SsoDomainsTable {
	return &SsoDomainsTable{
		ssoDomainsTable: newSsoDomainsTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newSsoDomainsTableImpl("", "excluded", ""),
	}
}

func newSsoDomainsTableImpl(schemaName, tableName, alias string) ssoDomainsTable {
	var (
		IDColumn            = postgres.StringColumn("id")
		SsoProviderIDColumn = postgres.StringColumn("sso_provider_id")
		DomainColumn        = postgres.StringColumn("domain")
		CreatedAtColumn     = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn     = postgres.TimestampzColumn("updated_at")
		allColumns          = postgres.ColumnList{IDColumn, SsoProviderIDColumn, DomainColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns      = postgres.ColumnList{SsoProviderIDColumn, DomainColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return ssoDomainsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		SsoProviderID: SsoProviderIDColumn,
		Domain:        DomainColumn,
		CreatedAt:     CreatedAtColumn,
		UpdatedAt:     UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
