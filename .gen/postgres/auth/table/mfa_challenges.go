//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var MfaChallenges = newMfaChallengesTable("auth", "mfa_challenges", "")

type mfaChallengesTable struct {
	postgres.Table

	// Columns
	ID         postgres.ColumnString
	FactorID   postgres.ColumnString
	CreatedAt  postgres.ColumnTimestampz
	VerifiedAt postgres.ColumnTimestampz
	IPAddress  postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type MfaChallengesTable struct {
	mfaChallengesTable

	EXCLUDED mfaChallengesTable
}

// AS creates new MfaChallengesTable with assigned alias
func (a MfaChallengesTable) AS(alias string) *MfaChallengesTable {
	return newMfaChallengesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new MfaChallengesTable with assigned schema name
func (a MfaChallengesTable) FromSchema(schemaName string) *MfaChallengesTable {
	return newMfaChallengesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new MfaChallengesTable with assigned table prefix
func (a MfaChallengesTable) WithPrefix(prefix string) *MfaChallengesTable {
	return newMfaChallengesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new MfaChallengesTable with assigned table suffix
func (a MfaChallengesTable) WithSuffix(suffix string) *MfaChallengesTable {
	return newMfaChallengesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newMfaChallengesTable(schemaName, tableName, alias string) *MfaChallengesTable {
	return &MfaChallengesTable{
		mfaChallengesTable: newMfaChallengesTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newMfaChallengesTableImpl("", "excluded", ""),
	}
}

func newMfaChallengesTableImpl(schemaName, tableName, alias string) mfaChallengesTable {
	var (
		IDColumn         = postgres.StringColumn("id")
		FactorIDColumn   = postgres.StringColumn("factor_id")
		CreatedAtColumn  = postgres.TimestampzColumn("created_at")
		VerifiedAtColumn = postgres.TimestampzColumn("verified_at")
		IPAddressColumn  = postgres.StringColumn("ip_address")
		allColumns       = postgres.ColumnList{IDColumn, FactorIDColumn, CreatedAtColumn, VerifiedAtColumn, IPAddressColumn}
		mutableColumns   = postgres.ColumnList{FactorIDColumn, CreatedAtColumn, VerifiedAtColumn, IPAddressColumn}
	)

	return mfaChallengesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		FactorID:   FactorIDColumn,
		CreatedAt:  CreatedAtColumn,
		VerifiedAt: VerifiedAtColumn,
		IPAddress:  IPAddressColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
