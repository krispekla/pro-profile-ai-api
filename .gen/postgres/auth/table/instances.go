//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Instances = newInstancesTable("auth", "instances", "")

type instancesTable struct {
	postgres.Table

	// Columns
	ID            postgres.ColumnString
	UUID          postgres.ColumnString
	RawBaseConfig postgres.ColumnString
	CreatedAt     postgres.ColumnTimestampz
	UpdatedAt     postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type InstancesTable struct {
	instancesTable

	EXCLUDED instancesTable
}

// AS creates new InstancesTable with assigned alias
func (a InstancesTable) AS(alias string) *InstancesTable {
	return newInstancesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new InstancesTable with assigned schema name
func (a InstancesTable) FromSchema(schemaName string) *InstancesTable {
	return newInstancesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new InstancesTable with assigned table prefix
func (a InstancesTable) WithPrefix(prefix string) *InstancesTable {
	return newInstancesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new InstancesTable with assigned table suffix
func (a InstancesTable) WithSuffix(suffix string) *InstancesTable {
	return newInstancesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newInstancesTable(schemaName, tableName, alias string) *InstancesTable {
	return &InstancesTable{
		instancesTable: newInstancesTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newInstancesTableImpl("", "excluded", ""),
	}
}

func newInstancesTableImpl(schemaName, tableName, alias string) instancesTable {
	var (
		IDColumn            = postgres.StringColumn("id")
		UUIDColumn          = postgres.StringColumn("uuid")
		RawBaseConfigColumn = postgres.StringColumn("raw_base_config")
		CreatedAtColumn     = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn     = postgres.TimestampzColumn("updated_at")
		allColumns          = postgres.ColumnList{IDColumn, UUIDColumn, RawBaseConfigColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns      = postgres.ColumnList{UUIDColumn, RawBaseConfigColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return instancesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		UUID:          UUIDColumn,
		RawBaseConfig: RawBaseConfigColumn,
		CreatedAt:     CreatedAtColumn,
		UpdatedAt:     UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
