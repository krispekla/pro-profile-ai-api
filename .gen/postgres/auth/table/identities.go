//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Identities = newIdentitiesTable("auth", "identities", "")

type identitiesTable struct {
	postgres.Table

	// Columns
	ProviderID   postgres.ColumnString
	UserID       postgres.ColumnString
	IdentityData postgres.ColumnString
	Provider     postgres.ColumnString
	LastSignInAt postgres.ColumnTimestampz
	CreatedAt    postgres.ColumnTimestampz
	UpdatedAt    postgres.ColumnTimestampz
	Email        postgres.ColumnString
	ID           postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type IdentitiesTable struct {
	identitiesTable

	EXCLUDED identitiesTable
}

// AS creates new IdentitiesTable with assigned alias
func (a IdentitiesTable) AS(alias string) *IdentitiesTable {
	return newIdentitiesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new IdentitiesTable with assigned schema name
func (a IdentitiesTable) FromSchema(schemaName string) *IdentitiesTable {
	return newIdentitiesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new IdentitiesTable with assigned table prefix
func (a IdentitiesTable) WithPrefix(prefix string) *IdentitiesTable {
	return newIdentitiesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new IdentitiesTable with assigned table suffix
func (a IdentitiesTable) WithSuffix(suffix string) *IdentitiesTable {
	return newIdentitiesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newIdentitiesTable(schemaName, tableName, alias string) *IdentitiesTable {
	return &IdentitiesTable{
		identitiesTable: newIdentitiesTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newIdentitiesTableImpl("", "excluded", ""),
	}
}

func newIdentitiesTableImpl(schemaName, tableName, alias string) identitiesTable {
	var (
		ProviderIDColumn   = postgres.StringColumn("provider_id")
		UserIDColumn       = postgres.StringColumn("user_id")
		IdentityDataColumn = postgres.StringColumn("identity_data")
		ProviderColumn     = postgres.StringColumn("provider")
		LastSignInAtColumn = postgres.TimestampzColumn("last_sign_in_at")
		CreatedAtColumn    = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn    = postgres.TimestampzColumn("updated_at")
		EmailColumn        = postgres.StringColumn("email")
		IDColumn           = postgres.StringColumn("id")
		allColumns         = postgres.ColumnList{ProviderIDColumn, UserIDColumn, IdentityDataColumn, ProviderColumn, LastSignInAtColumn, CreatedAtColumn, UpdatedAtColumn, EmailColumn, IDColumn}
		mutableColumns     = postgres.ColumnList{ProviderIDColumn, UserIDColumn, IdentityDataColumn, ProviderColumn, LastSignInAtColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return identitiesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ProviderID:   ProviderIDColumn,
		UserID:       UserIDColumn,
		IdentityData: IdentityDataColumn,
		Provider:     ProviderColumn,
		LastSignInAt: LastSignInAtColumn,
		CreatedAt:    CreatedAtColumn,
		UpdatedAt:    UpdatedAtColumn,
		Email:        EmailColumn,
		ID:           IDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
