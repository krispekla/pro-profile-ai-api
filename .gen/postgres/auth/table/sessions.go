//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Sessions = newSessionsTable("auth", "sessions", "")

type sessionsTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnString
	UserID      postgres.ColumnString
	CreatedAt   postgres.ColumnTimestampz
	UpdatedAt   postgres.ColumnTimestampz
	FactorID    postgres.ColumnString
	Aal         postgres.ColumnString
	NotAfter    postgres.ColumnTimestampz
	RefreshedAt postgres.ColumnTimestamp
	UserAgent   postgres.ColumnString
	IP          postgres.ColumnString
	Tag         postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SessionsTable struct {
	sessionsTable

	EXCLUDED sessionsTable
}

// AS creates new SessionsTable with assigned alias
func (a SessionsTable) AS(alias string) *SessionsTable {
	return newSessionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SessionsTable with assigned schema name
func (a SessionsTable) FromSchema(schemaName string) *SessionsTable {
	return newSessionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SessionsTable with assigned table prefix
func (a SessionsTable) WithPrefix(prefix string) *SessionsTable {
	return newSessionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SessionsTable with assigned table suffix
func (a SessionsTable) WithSuffix(suffix string) *SessionsTable {
	return newSessionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSessionsTable(schemaName, tableName, alias string) *SessionsTable {
	return &SessionsTable{
		sessionsTable: newSessionsTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newSessionsTableImpl("", "excluded", ""),
	}
}

func newSessionsTableImpl(schemaName, tableName, alias string) sessionsTable {
	var (
		IDColumn          = postgres.StringColumn("id")
		UserIDColumn      = postgres.StringColumn("user_id")
		CreatedAtColumn   = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn   = postgres.TimestampzColumn("updated_at")
		FactorIDColumn    = postgres.StringColumn("factor_id")
		AalColumn         = postgres.StringColumn("aal")
		NotAfterColumn    = postgres.TimestampzColumn("not_after")
		RefreshedAtColumn = postgres.TimestampColumn("refreshed_at")
		UserAgentColumn   = postgres.StringColumn("user_agent")
		IPColumn          = postgres.StringColumn("ip")
		TagColumn         = postgres.StringColumn("tag")
		allColumns        = postgres.ColumnList{IDColumn, UserIDColumn, CreatedAtColumn, UpdatedAtColumn, FactorIDColumn, AalColumn, NotAfterColumn, RefreshedAtColumn, UserAgentColumn, IPColumn, TagColumn}
		mutableColumns    = postgres.ColumnList{UserIDColumn, CreatedAtColumn, UpdatedAtColumn, FactorIDColumn, AalColumn, NotAfterColumn, RefreshedAtColumn, UserAgentColumn, IPColumn, TagColumn}
	)

	return sessionsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		UserID:      UserIDColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedAt:   UpdatedAtColumn,
		FactorID:    FactorIDColumn,
		Aal:         AalColumn,
		NotAfter:    NotAfterColumn,
		RefreshedAt: RefreshedAtColumn,
		UserAgent:   UserAgentColumn,
		IP:          IPColumn,
		Tag:         TagColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
