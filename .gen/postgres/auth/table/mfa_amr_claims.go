//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var MfaAmrClaims = newMfaAmrClaimsTable("auth", "mfa_amr_claims", "")

type mfaAmrClaimsTable struct {
	postgres.Table

	// Columns
	SessionID            postgres.ColumnString
	CreatedAt            postgres.ColumnTimestampz
	UpdatedAt            postgres.ColumnTimestampz
	AuthenticationMethod postgres.ColumnString
	ID                   postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type MfaAmrClaimsTable struct {
	mfaAmrClaimsTable

	EXCLUDED mfaAmrClaimsTable
}

// AS creates new MfaAmrClaimsTable with assigned alias
func (a MfaAmrClaimsTable) AS(alias string) *MfaAmrClaimsTable {
	return newMfaAmrClaimsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new MfaAmrClaimsTable with assigned schema name
func (a MfaAmrClaimsTable) FromSchema(schemaName string) *MfaAmrClaimsTable {
	return newMfaAmrClaimsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new MfaAmrClaimsTable with assigned table prefix
func (a MfaAmrClaimsTable) WithPrefix(prefix string) *MfaAmrClaimsTable {
	return newMfaAmrClaimsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new MfaAmrClaimsTable with assigned table suffix
func (a MfaAmrClaimsTable) WithSuffix(suffix string) *MfaAmrClaimsTable {
	return newMfaAmrClaimsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newMfaAmrClaimsTable(schemaName, tableName, alias string) *MfaAmrClaimsTable {
	return &MfaAmrClaimsTable{
		mfaAmrClaimsTable: newMfaAmrClaimsTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newMfaAmrClaimsTableImpl("", "excluded", ""),
	}
}

func newMfaAmrClaimsTableImpl(schemaName, tableName, alias string) mfaAmrClaimsTable {
	var (
		SessionIDColumn            = postgres.StringColumn("session_id")
		CreatedAtColumn            = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn            = postgres.TimestampzColumn("updated_at")
		AuthenticationMethodColumn = postgres.StringColumn("authentication_method")
		IDColumn                   = postgres.StringColumn("id")
		allColumns                 = postgres.ColumnList{SessionIDColumn, CreatedAtColumn, UpdatedAtColumn, AuthenticationMethodColumn, IDColumn}
		mutableColumns             = postgres.ColumnList{SessionIDColumn, CreatedAtColumn, UpdatedAtColumn, AuthenticationMethodColumn}
	)

	return mfaAmrClaimsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		SessionID:            SessionIDColumn,
		CreatedAt:            CreatedAtColumn,
		UpdatedAt:            UpdatedAtColumn,
		AuthenticationMethod: AuthenticationMethodColumn,
		ID:                   IDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
